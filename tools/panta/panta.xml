<tool id="panta" name="PanTA" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="24.2" license="MIT">
    <description>Efficient inference of large prokaryotic pangenomes with PanTA</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>

    <command detect_errors="exit_code"><![CDATA[
        mkdir out &&
        #import re, os
        #set input_directory = 'input_directory'
        mkdir $input_directory &&

        ## fixing the input files extension
        #if $input_type.input_type_selector == "gff":
            #for gff in $input_type.input_gff
                #set identifier = re.sub('[^\s\w\-\\.]','_',str($gff.element_identifier)) ##gets the original & sanitized filename
                ln -fs '$gff' '$input_directory/$identifier' && ##creates a symlink to the input file
            #end for
        #elif $input_type.input_type_selector == "tsv":
            #set identifier = re.sub('[^\s\w\-\\.]','_',str($input_type.input_tsv.element_identifier)) ##gets the original & sanitized filename
            ln -fs '$input_type.input_tsv' '$input_directory/$identifier' && ##creates a symlink to the input file
        #end if

        #if $mode.select_mode == "main":
            panta main
                #if $input_type.input_type_selector == "gff":
                    -g $input_directory/*.gff
                #elif $input_type.input_type_selector == "tsv":
                    -f $input_directory/*.tsv
                #end if
                -o out
                $dont_split
                --blast '$blast'
                --identity '$identity'
                --LD '$LD'
                --AL '$AL'
                --AS '$AS'
                --evalue '$evalue'
                --threads "\${GALAXY_SLOTS:-8}"
                --table '$table'
                #if $alignment != 'None':
                    --alignment '$alignment'
                #end if
            && tar -czf collection_dir.tar.gz -C out . ## creates a tar.gz archive of the output directory

        #elif $mode.select_mode == "add":
            mkdir -p extracted_dir &&
            ln -s $collection_dir collection_dir.tar.gz && ## creates a symlink to the collection directory
            tar --strip-components=1 -xzf collection_dir.tar.gz -C extracted_dir && ## extracts the collection directory
            ls -al &&
            panta add
                #if $input_type.input_type_selector == "gff":
                    -g $input_directory/*.gff
                #elif $input_type.input_type_selector == "tsv":
                    -f $input_directory/*.tsv
                #end if
                -c extracted_dir
                $dont_split
                --blast '$blast'
                --identity '$identity'
                --LD '$LD'
                --AL '$AL'
                --AS '$AS'
                --evalue '$evalue'
                --threads "\${GALAXY_SLOTS:-8}"
                --table '$table'
                #if $alignment != 'None':
                    --alignment '$alignment'
                #end if
                && cp -r extracted_dir/* out 
        #end if
    ]]></command>

    <inputs>
        <conditional name="mode">
            <param label="Select mode" name="select_mode" type="select">
                <option selected="true" value="main">Use PanTA main</option>
                <option value="add">Use PanTA add</option>
            </param>
            <when value="main"/>
            <when value="add">
                <param name="collection_dir" type="data" format="tar,tar.gz" label="Previous collection directory"/>
            </when>
        </conditional>
        <conditional name="input_type">
            <param name="input_type_selector" type="select" label="Choose the input format">
                <option value="gff" selected="true">GFF File</option>
                <option value="tsv">TSV File</option>
            </param>
            <when value="gff">
                <param type="data_collection" name="input_gff" format="gff" collection_type="list" label="Select input files to analyze" help="Select the files you wish to analyze with PanTA, must be in gff3 format."/>
            </when>
            <when value="tsv">
                <param type="data" name="input_tsv" format="tsv" multiple="false" label="Select input file to analyze" help="Select the file you wish to analyze with PanTA, must be in tsv format."/>
            </when>
        </conditional>
        <param argument="--dont-split" type="boolean" truevalue="--dont-split" falsevalue="" label="Dont split" help="Decide for or against splitting paralog clusters"/>
        <param argument="--blast" type="select" label="Alignment method" help="Method for all-against-all alignment (default: diamond)">
            <option value="diamond" selected="True">Diamond</option>
            <option value="blast">Blast</option>
        </param>
        <param argument="--identity" type="float" value="0.7" label="Minimum percentage identity" help="Set the minimum percentage identity"/>
        <param argument="--LD" type="float" value="0.7" label="Length difference cutoff" help="Set the length difference cutoff between two sequences"/>
        <param argument="--AL" type="float" value="0" label="Alignment coverage for the longer sequence" help="Set the alignment coverage for the longer sequence"/>
        <param argument="--AS" type="float" value="0" label="Alignment coverage for the shorter sequence" help="Set the alignment coverage for the shorter sequence"/>
        <param argument="--evalue" type="float" value="1e-06" label="Blast evalue" help="Maximum expected value for reporting hits and lower values are stricter"/>
        <param argument="--table" type="integer" label="Codon table" help="Set the codon table"/>
        <param argument="--alignment" type="select" label="Run alignment for each gene cluster">
            <option value="None" selected="True">None</option>
            <option value="nucleotide">Nucleotide</option>
            <option value="protein">Protein</option>
        </param>
    </inputs>

    <outputs>
        <!--Basic PanTA main outputs -->
        <data format="json" name="annotated_clusters" label="${tool.name} on ${on_string} Annotated Clusters" from_work_dir="out/annotated_clusters.json"/>
        <data format="tsv" name="blast_output" label="${tool.name} on ${on_string} Blast" from_work_dir="out/blast.tsv"/>
        <data format="json" name="clusters" label="${tool.name} on ${on_string} Clusters" from_work_dir="out/clusters.json"/>
        <data format="csv" name="gene_annotation" label="${tool.name} on ${on_string} Gene Annotation" from_work_dir="out/gene_annotation.csv"/>
        <data format="csv" name="gene_position" label="${tool.name} on ${on_string} Gene Position" from_work_dir="out/gene_position.csv"/>
        <data format="csv" name="gene_presence_absence" label="${tool.name} on ${on_string} Gene Presence Absence" from_work_dir="out/gene_presence_absence.csv"/>
        <data format="txt" name="gene_presence_absence_Rtab" label="${tool.name} on ${on_string} Gene Presence Absence Rtab" from_work_dir="out/gene_presence_absence.Rtab"/>
        <data format="fasta" name="representative_clusters_nucl" label="${tool.name} on ${on_string} Representative Clusters Nucl" from_work_dir="out/representative_clusters_nucl.fasta"/>
        <data format="fasta" name="representative_clusters_prot" label="${tool.name} on ${on_string} Representative Clusters Prot" from_work_dir="out/representative_clusters_prot.fasta"/>
        <data format="fasta" name="representative" label="${tool.name} on ${on_string} Representative" from_work_dir="out/representative.fasta"/>
        <data format="json" name="samples" label="${tool.name} on ${on_string} Samples" from_work_dir="out/samples.json"/>
        <data format="txt" name="summary_statistics" label="${tool.name} on ${on_string} Summary Statistics" from_work_dir="out/summary_statistics.txt"/>
    </outputs>

    <tests>
        <!--Basic PanTA main test-->
        <test expect_num_outputs="12">
            <conditional name="mode">
                <param name="select_mode" value="main"/>
            </conditional>
            <conditional name="input_type">
                <param name="input_type_selector" value="gff"/>
                <param name="input_gff">
                    <collection type="list">
                        <element name="GCA_021342655.1.gff" value="main/GCA_021342655.1.gff"/>
                        <element name="GCA_021534865.1.gff" value="main/GCA_021534865.1.gff"/>
                        <element name="GCA_021697815.1.gff" value="main/GCA_021697815.1.gff"/>
                        <element name="GCA_021890555.1.gff" value="main/GCA_021890555.1.gff"/>
                    </collection>
                </param>
            </conditional>
            <param name="table" value="10"/>
            <output name="annotated_clusters" ftype="json">
                <assert_contents>
                    <has_text text="GCA_021342655.1-NZ_JAJTPH010000093.1-5475-cds-WP_000557454.1"/>
                    <has_n_lines n="96508" delta='3'/>
                </assert_contents>
            </output>
            <output name="blast_output" ftype="tsv">
                <assert_contents>
                    <has_text text="GCA_021342655.1-NZ_JAJTPH010000101.1-3-cds-WP_233337042.1"/>
                    <has_n_lines n="30680" delta='3'/>
                </assert_contents>
            </output>
            <output name="clusters" ftype="json">
                <assert_contents>
                    <has_text text="GCA_021890555.1-NZ_JAKLOD010000002.1-4878-cds-L3T02_RS24235"/>
                    <has_n_lines n="24266" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_annotation" ftype="csv">
                <assert_contents>
                    <has_text text="IclR family transcriptional regulator,6"/>
                    <has_n_lines n="19712" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_position" ftype="csv">
                <assert_contents>
                    <has_text text="1-NZ_JAJTPH010000010.1-23-cds-LXO36_RS13380"/>
                    <has_n_lines n="195" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_presence_absence" ftype="csv">
                <assert_contents>
                    <has_n_lines n="7682" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_presence_absence_Rtab" ftype="txt">
                <assert_contents>
                    <has_n_lines n="7682" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative_clusters_nucl" ftype="fasta">
                <assert_contents>
                    <has_text text="GGTCTGCCCCACCGGCATCGACATTCGCGACGGCCTGCAGATCGAGTGCATTGGTTGCGC"/>
                    <has_n_lines n="124180" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative_clusters_prot" ftype="fasta">
                <assert_contents>
                    <has_text text="GLPHRHRHSRRPADRVHWLRRLHRCLRQHHGQDGLPQGPDQLHNRTQSFRTEDPSAAPTP"/>
                    <has_n_lines n="49014" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative" ftype="fasta">
                <assert_contents>
                    <has_text text="RIEGSVWPKSIRGSTPKVRGTCQIERAASESPHFMRFHVACPHCGEEQYLKFGDKETPFGLKWTPDDPSSVFYLCEHNACVIRQQELDFTDARYICEKTGIWTRDGILWFSSSGEEIEPPDSVTFHIWTAYSPFTTWVQIVKDWMKTKGDTGKRKTFVNTTLGETWEAKIGERPDAEVMAERKEHYSAPVPDRVAYLTAGIDSQLDRYEMRVWGWGPGEESWLIDRQIIMGRHDDEQTLLRVDEAINKTYTRRNGAEMS"/>
                    <has_n_lines n="18795" delta='3'/>
                </assert_contents>
            </output>
            <output name="samples" ftype="json">
                <assert_contents>
                    <has_n_lines n="22" delta='3'/>
                </assert_contents>
            </output>
            <output name="summary_statistics" ftype="txt">
                <assert_contents>
                    <has_text text="Soft core genes"/>
                    <has_n_lines n="6" delta='3'/>
                </assert_contents>
            </output>
        </test>
        <!--Basic PanTA add test -->
        <test expect_num_outputs="12">
            <conditional name="mode">
                <param name="select_mode" value="add"/>
                <param name="collection_dir" value="collection_dir.tar.gz" ftype="tar.gz"/>
            </conditional>
            <conditional name="input_type">
                <param name="input_type_selector" value="gff"/> 
                <param name="input_gff">
                    <collection type="list">
                        <element name="GCA_021342735.1.gff" value="add/GCA_021342735.1.gff"/>
                        <element name="GCA_021725855.1.gff" value="add/GCA_021725855.1.gff"/>
                        <element name="GCA_021890695.1.gff" value="add/GCA_021890695.1.gff"/>
                    </collection>
                </param>
            </conditional>
            <param name="table" value="10"/>
            <output name="annotated_clusters" ftype="json">
                <assert_contents>
                    <has_text text="GCA_021342655.1-NZ_JAJTPH010000093.1-5475-cds-WP_000557454.1"/>
                    <has_n_lines n="118781" delta='3'/>
                </assert_contents>
            </output>
            <output name="blast_output" ftype="tsv">
                <assert_contents>
                    <has_text text="GCA_021342655.1-NZ_JAJTPH010000101.1-3-cds-WP_233337042.1"/>
                    <has_n_lines n="48314" delta='3'/>
                </assert_contents>
            </output>
            <output name="clusters" ftype="json">
                <assert_contents>
                    <has_text text="GCA_021890555.1-NZ_JAKLOD010000002.1-4878-cds-L3T02_RS24235"/>
                    <has_n_lines n="39690" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_annotation" ftype="csv">
                <assert_contents>
                    <has_text text="IclR family transcriptional regulator,6"/>
                    <has_n_lines n="33564" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_position" ftype="csv">
                <assert_contents>
                    <has_text text="1-NZ_JAJTPH010000010.1-23-cds-LXO36_RS13380"/>
                    <has_n_lines n="363" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_presence_absence" ftype="csv">
                <assert_contents>
                    <has_n_lines n="8523" delta='3'/>
                </assert_contents>
            </output>
            <output name="gene_presence_absence_Rtab" ftype="txt">
                <assert_contents>
                    <has_n_lines n="8523" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative_clusters_nucl" ftype="fasta">
                <assert_contents>
                    <has_text text="GGTCTGCCCCACCGGCATCGACATTCGCGACGGCCTGCAGATCGAGTGCATTGGTTGCGC"/>
                    <has_n_lines n="136549" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative_clusters_prot" ftype="fasta">
                <assert_contents>
                    <has_text text="GLPHRHRHSRRPADRVHWLRRLHRCLRQHHGQDGLPQGPDQLHNRTQSFRTEDPSAAPTP"/>
                    <has_n_lines n="53942" delta='3'/>
                </assert_contents>
            </output>
            <output name="representative" ftype="fasta">
                <assert_contents>
                    <has_text text="RIEGSVWPKSIRGSTPKVRGTCQIERAASESPHFMRFHVACPHCGEEQYLKFGDKETPFGLKWTPDDPSSVFYLCEHNACVIRQQELDFTDARYICEKTGIWTRDGILWFSSSGEEIEPPDSVTFHIWTAYSPFTTWVQIVKDWMKTKGDTGKRKTFVNTTLGETWEAKIGERPDAEVMAERKEHYSAPVPDRVAYLTAGIDSQLDRYEMRVWGWGPGEESWLIDRQIIMGRHDDEQTLLRVDEAINKTYTRRNGAEMS"/>
                    <has_n_lines n="43340" delta='3'/>
                </assert_contents>
            </output>
            <output name="samples" ftype="json">
                <assert_contents>
                    <has_n_lines n="37" delta='3'/>
                </assert_contents>
            </output>
            <output name="summary_statistics" ftype="txt">
                <assert_contents>
                    <has_text text="Soft core genes"/>
                    <has_n_lines n="6" delta='3'/>
                </assert_contents>
            </output>
        </test>

    </tests>
    <help><![CDATA[

**What it does**

PanTA is developed with the aim to build the pangenome of a large collection of genomes and to add a set of new genomes to an existing pangenome without rebuilding the accumulated pangenome from scratch.
PanTA takes as input a list of genome assemblies and their annotations. It then extracts the protein-coding regions as specified by the annotations and translates them into protein sequences. 
PanTA then generates output reports according to the standards set out by Roary, which include a spreadsheet detailing the presence and absence of each gene in each isolate as well as a summary of pangenome statistics.

**Input**

PanTA takes as input a collection of gff3 files and also optionally a tsv file. 

**Output**

PanTA generates output reports according to the standards set out by Roary,
which include a spreadsheet detailing the presence and absence of each gene in each isolate as well as a summary of pangenome statistics.

    ]]></help>
    <citations>
        <citation type="doi">1234</citation>
    </citations>
</tool>